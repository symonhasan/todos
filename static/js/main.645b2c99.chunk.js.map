{"version":3,"sources":["Item.js","Paper.js","Bottom.js","Top.js","App.js","reducer.js","index.js"],"names":["connect","dispatch","editTask","id","text","type","payload","markTaskAsDone","removeTask","props","useState","readonly","setreadonly","setText","setId","status","setStatus","useEffect","active","className","value","readOnly","onDoubleClick","e","onChange","target","onKeyPress","key","onClick","state","tasks","mode","map","element","index","count","bottomHandler","saveNewTask","placeholder","event","App","setMode","initialState","reducer","action","unshift","splice","newTask","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.645b2c99.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Item = (props) => {\r\n    const [readonly, setreadonly] = useState(true);\r\n    const [text, setText] = useState(\"\");\r\n    const [id, setId] = useState(\"\");\r\n    const [ status , setStatus ] = useState(\"\");\r\n    \r\n    useEffect(() => {\r\n        setText(props.text);\r\n        setId(props.id);\r\n        setStatus( props.active );\r\n    }, [props.text, props.id, props.active ]);\r\n\r\n    return (\r\n        <span className=\"paper-item\">\r\n            <input\r\n                className={ !status ? \"cross-item\" : \"\"}\r\n                type=\"text\"\r\n                value={text}\r\n                readOnly={readonly}\r\n                id={id}\r\n                onDoubleClick={(e) => {\r\n                    if( status )\r\n                        setreadonly(false);\r\n                }}\r\n                onChange={(e) => {\r\n                    setText(e.target.value);\r\n                }}\r\n                onKeyPress={(e) => {\r\n                    if( e.key === 'Enter' ){\r\n                        props.editTask( e.target.id , text );\r\n                        setreadonly( true );\r\n                    }\r\n                }}\r\n            />\r\n            <div className=\"paper-item-icons\">\r\n                {props.active ? (\r\n                    <span className=\"tick-icon\" id={id} onClick={(e) => { props.markTaskAsDone( e.target.id );}}>\r\n                        &#10003;\r\n                    </span>\r\n                ) : null}\r\n                <span className=\"remove-icon\" id={id} onClick={(e) => { props.removeTask( e.target.id )}}>\r\n                    x\r\n                </span>\r\n            </div>\r\n        </span>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = ( dispatch ) => {\r\n    return{\r\n        editTask: ( id , text ) => {\r\n            dispatch({\r\n                type: \"EDIT_TASK\",\r\n                payload: {\r\n                    id: id,\r\n                    text: text,\r\n                }\r\n            })\r\n        },\r\n        markTaskAsDone: ( id ) => {\r\n            dispatch({\r\n                type: \"DONE\",\r\n                payload:{\r\n                    id: id,\r\n                }\r\n            })\r\n        },\r\n        removeTask: ( id ) => {\r\n            dispatch({\r\n                type: \"REMOVE\",\r\n                payload:{\r\n                    id: id,\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect( null , mapDispatchToProps )( Item );\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Item from \"./Item\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Paper = (props) => {\r\n    const renderItems = () => {\r\n        if (props.mode === \"all\") {\r\n            return props.tasks.map((element, index) => {\r\n                return (\r\n                    <Item\r\n                        text={element.text}\r\n                        active={element.status}\r\n                        key={index}\r\n                        id={index}\r\n                    />\r\n                );\r\n            });\r\n        } else if (props.mode === \"active\") {\r\n            return props.tasks.map((element, index) => {\r\n                if (element.status) {\r\n                    return (\r\n                        <Item\r\n                            text={element.text}\r\n                            active={element.status}\r\n                            key={index}\r\n                            id={index}\r\n                        />\r\n                    );\r\n                }\r\n                return null;\r\n            });\r\n        } else {\r\n            return props.tasks.map((element, index) => {\r\n                if (!element.status) {\r\n                    return (\r\n                        <Item\r\n                            text={element.text}\r\n                            active={element.status}\r\n                            key={index}\r\n                            id={index}\r\n                        />\r\n                    );\r\n                }\r\n                return null;\r\n            });\r\n        }\r\n    };\r\n    return <div className=\"paper\">{renderItems()}</div>;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Paper);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Bottom = ( props ) => {\r\n    return(\r\n        <div className=\"todo-bottom\">\r\n          <span>{props.count} item left</span>\r\n          <ul className=\"todo-bottom-option\">\r\n            <li id=\"all\" onClick={ props.bottomHandler } className={ props.mode === 'all' ? \"todo-bottom-option-active\" : null}>All</li>\r\n            <li id=\"active\" onClick={ props.bottomHandler } className={ props.mode === 'active' ? \"todo-bottom-option-active\" : null}>Active</li>\r\n            <li id=\"completed\" onClick={ props.bottomHandler } className={ props.mode === 'completed' ? \"todo-bottom-option-active\" : null}>Completed</li>\r\n          </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ( state ) => {\r\n    return{\r\n        count: state.count,\r\n    }\r\n}\r\n\r\nexport default connect( mapStateToProps )( Bottom );","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Top = (props) => {\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const onChangeHandler = (event) => {\r\n        setText(event.target.value);\r\n    };\r\n\r\n    const onEnterPress = (event) => {\r\n        if (event.key === \"Enter\") {\r\n            props.saveNewTask( text );\r\n            setText(\"\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"todo-area-input\">\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"What's need to be done?\"\r\n                value={text}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onEnterPress}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = ( dispatch ) => {\r\n    return{\r\n        saveNewTask: ( text ) => {\r\n            dispatch({\r\n                type: \"NEW_TASK\",\r\n                payload: {\r\n                    text: text,\r\n                    status: true,\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect( null ,mapDispatchToProps)( Top );\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Paper from './Paper';\nimport Bottom from './Bottom';\nimport Top from './Top';\n\nfunction App() {\n  const [ mode , setMode ] = useState(\"all\");\n\n  const bottomHandler = ( event ) => {\n    setMode( event.target.id );\n  }\n  return (\n    <div className=\"app-div\">\n      <div className=\"app-title\">\n        <p>to<span>dos</span></p>\n      </div>\n      <div className=\"todo-area\">\n        <Top />\n        <Paper mode={mode}/>\n        <Bottom bottomHandler={bottomHandler} mode={mode}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\r\n    tasks: [],\r\n    count: 0,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    if (action.type === \"NEW_TASK\") {\r\n        const { tasks } = state;\r\n        tasks.unshift({\r\n            ...action.payload,\r\n        });\r\n        return {\r\n            tasks: [...tasks],\r\n            count: state.count + 1,\r\n        };\r\n    } else if (action.type === \"EDIT_TASK\") {\r\n        const { tasks } = state;\r\n        const { id , text } = action.payload;\r\n        tasks.splice( id , 1 );\r\n        tasks.splice( id , 0 , {\r\n            text: text,\r\n            status: true,\r\n        });\r\n        return{\r\n            ...state,\r\n            tasks: [...tasks],\r\n        }\r\n    } else if (action.type === \"DONE\") {\r\n        const { tasks } = state;\r\n        const { id } = action.payload;\r\n        const { text } = tasks[ id ];\r\n        const newTask = {\r\n            text: text,\r\n            status: false,\r\n        }\r\n        tasks.splice( id , 1 );\r\n        tasks.splice( id , 0 , newTask );\r\n        return{\r\n            tasks: [...tasks],\r\n            count: state.count - 1\r\n        }\r\n    } else if (action.type === \"REMOVE\") {\r\n        const { tasks } = state;\r\n        const { id } = action.payload;\r\n        const { status } = tasks[ id ];\r\n        tasks.splice( id , 1 );\r\n        let count = state.count;\r\n        if( status ){\r\n            count = count - 1;\r\n        }\r\n        return{\r\n            tasks: [...tasks],\r\n            count: count\r\n        }\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore } from 'redux';\nimport reducer from './reducer';\nimport { Provider } from 'react-redux';\n\nconst store = createStore( reducer );\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}